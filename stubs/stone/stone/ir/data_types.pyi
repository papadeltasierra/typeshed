import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod

class ParameterError(Exception): ...

def generic_type_name(v): ...
def record_custom_annotation_imports(annotation, namespace) -> None: ...

class DataType(metaclass=abc.ABCMeta):
    __metaclass__ = ABCMeta
    def __init__(self) -> None: ...
    @property
    def name(self): ...
    @abstractmethod
    def check(self, val): ...
    @abstractmethod
    def check_example(self, ex_field): ...

class Primitive(DataType, metaclass=abc.ABCMeta):
    def check_attr_repr(self, attr_field): ...

class Composite(DataType, metaclass=abc.ABCMeta):
    recursive_custom_annotations: Incomplete
    def __init__(self) -> None: ...

class Nullable(Composite):
    data_type: Incomplete
    def __init__(self, data_type) -> None: ...
    def check(self, val): ...
    def check_example(self, ex_field): ...
    def check_attr_repr(self, attr_field): ...

class Void(Primitive):
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...
    def check_attr_repr(self, attr_field) -> None: ...

class Bytes(Primitive):
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...
    def check_attr_repr(self, attr_field): ...

class _BoundedInteger(Primitive):
    minimum: int | None
    maximum: int | None
    min_value: Incomplete
    max_value: Incomplete
    def __init__(self, min_value: Incomplete | None = None, max_value: Incomplete | None = None) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...

class Int32(_BoundedInteger):
    minimum: Incomplete
    maximum: Incomplete

class UInt32(_BoundedInteger):
    minimum: int
    maximum: Incomplete

class Int64(_BoundedInteger):
    minimum: Incomplete
    maximum: Incomplete

class UInt64(_BoundedInteger):
    minimum: int
    maximum: Incomplete

class _BoundedFloat(Primitive):
    minimum: float | None
    maximum: float | None
    min_value: Incomplete
    max_value: Incomplete
    def __init__(self, min_value: Incomplete | None = None, max_value: Incomplete | None = None) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...

class Float32(_BoundedFloat):
    minimum: Incomplete
    maximum: Incomplete

class Float64(_BoundedFloat): ...

class Boolean(Primitive):
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...

class String(Primitive):
    min_length: Incomplete
    max_length: Incomplete
    pattern: Incomplete
    pattern_re: Incomplete
    def __init__(
        self, min_length: Incomplete | None = None, max_length: Incomplete | None = None, pattern: Incomplete | None = None
    ) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...

class Timestamp(Primitive):
    format: Incomplete
    def __init__(self, fmt) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...
    def check_attr_repr(self, attr_field): ...

class List(Composite):
    data_type: Incomplete
    min_items: Incomplete
    max_items: Incomplete
    def __init__(self, data_type, min_items: Incomplete | None = None, max_items: Incomplete | None = None) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...

class Map(Composite):
    key_data_type: Incomplete
    value_data_type: Incomplete
    def __init__(self, key_data_type, value_data_type) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...

def doc_unwrap(raw_doc): ...

class Field:
    name: Incomplete
    data_type: Incomplete
    raw_doc: Incomplete
    doc: Incomplete
    redactor: Incomplete
    omitted_caller: Incomplete
    deprecated: Incomplete
    preview: Incomplete
    custom_annotations: Incomplete
    def __init__(self, name, data_type, doc, ast_node) -> None: ...
    def set_annotations(self, annotations) -> None: ...

class StructField(Field):
    has_default: bool
    def __init__(self, name, data_type, doc, ast_node) -> None: ...
    def set_default(self, default) -> None: ...
    @property
    def default(self): ...
    def check_attr_repr(self, attr): ...

class UnionField(Field):
    catch_all: Incomplete
    def __init__(self, name, data_type, doc, ast_node, catch_all: bool = False) -> None: ...

class UserDefined(Composite, metaclass=abc.ABCMeta):
    DEFAULT_EXAMPLE_LABEL: str
    namespace: Incomplete
    raw_doc: Incomplete
    doc: Incomplete
    fields: Incomplete
    parent_type: Incomplete
    def __init__(self, name, namespace, ast_node) -> None: ...
    def set_attributes(self, doc, fields, parent_type: Incomplete | None = None) -> None: ...
    @property
    def all_fields(self) -> None: ...
    def has_documented_type_or_fields(self, include_inherited_fields: bool = False): ...
    def has_documented_fields(self, include_inherited_fields: bool = False): ...
    def get_all_omitted_callers(self): ...
    @property
    def name(self): ...
    def copy(self): ...
    def prepend_field(self, field) -> None: ...
    def get_examples(self, compact: bool = False): ...

class Example:
    label: Incomplete
    text: Incomplete
    value: Incomplete
    def __init__(self, label, text, value, ast_node: Incomplete | None = None) -> None: ...

class Struct(UserDefined):
    composite_type: str
    subtypes: Incomplete
    def set_attributes(self, doc, fields, parent_type: Incomplete | None = None) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...
    def check_attr_repr(self, attrs): ...
    @property
    def all_fields(self): ...
    @property
    def all_required_fields(self): ...
    @property
    def all_optional_fields(self): ...
    def has_enumerated_subtypes(self): ...
    def get_enumerated_subtypes(self): ...
    def is_member_of_enumerated_subtypes_tree(self): ...
    def is_catch_all(self): ...
    def set_enumerated_subtypes(self, subtype_fields, is_catch_all) -> None: ...
    def get_all_subtypes_with_tags(self): ...

class Union(UserDefined):
    composite_type: str
    closed: Incomplete
    def __init__(self, name, namespace, ast_node, closed) -> None: ...
    catch_all_field: Incomplete
    parent_type: Incomplete
    def set_attributes(
        self, doc, fields, parent_type: Incomplete | None = None, catch_all_field: Incomplete | None = None
    ) -> None: ...
    def check(self, val) -> None: ...
    def check_example(self, ex_field) -> None: ...
    def check_attr_repr(self, attr_field): ...
    @property
    def all_fields(self): ...
    def unique_field_data_types(self): ...

class TagRef:
    union_data_type: Incomplete
    tag_name: Incomplete
    def __init__(self, union_data_type, tag_name) -> None: ...

class AnnotationTypeParam:
    name: Incomplete
    data_type: Incomplete
    raw_doc: Incomplete
    doc: Incomplete
    has_default: Incomplete
    default: Incomplete
    def __init__(self, name, data_type, doc, has_default, default, ast_node) -> None: ...

class AnnotationType:
    name: Incomplete
    namespace: Incomplete
    raw_doc: Incomplete
    doc: Incomplete
    params: Incomplete
    def __init__(self, name, namespace, doc, params) -> None: ...
    def has_documented_type_or_params(self): ...
    def has_documented_params(self): ...

class Annotation:
    name: Incomplete
    namespace: Incomplete
    def __init__(self, name, namespace, ast_node) -> None: ...

class Deprecated(Annotation): ...

class Omitted(Annotation):
    omitted_caller: Incomplete
    def __init__(self, name, namespace, ast_node, omitted_caller) -> None: ...

class Preview(Annotation): ...

class Redacted(Annotation):
    regex: Incomplete
    def __init__(self, name, namespace, ast_node, regex: Incomplete | None = None) -> None: ...

class RedactedBlot(Redacted): ...
class RedactedHash(Redacted): ...

class CustomAnnotation(Annotation):
    annotation_type_name: Incomplete
    annotation_type_ns: Incomplete
    args: Incomplete
    kwargs: Incomplete
    annotation_type: Incomplete
    def __init__(self, name, namespace, ast_node, annotation_type_name, annotation_type_ns, args, kwargs) -> None: ...
    def set_attributes(self, annotation_type) -> None: ...

class Alias(Composite):
    namespace: Incomplete
    raw_doc: Incomplete
    doc: Incomplete
    data_type: Incomplete
    redactor: Incomplete
    custom_annotations: Incomplete
    def __init__(self, name, namespace, ast_node) -> None: ...
    def set_annotations(self, annotations) -> None: ...
    def set_attributes(self, doc, data_type) -> None: ...
    @property
    def name(self): ...
    def check(self, val): ...
    def check_example(self, ex_field): ...
    def check_attr_repr(self, attr_field): ...

def unwrap_nullable(data_type): ...
def unwrap_aliases(data_type): ...
def resolve_aliases(data_type): ...
def strip_alias(data_type) -> None: ...
def unwrap(data_type): ...
def is_alias(data_type): ...
def is_bytes_type(data_type): ...
def is_boolean_type(data_type): ...
def is_composite_type(data_type): ...
def is_field_type(data_type): ...
def is_float_type(data_type): ...
def is_integer_type(data_type): ...
def is_list_type(data_type): ...
def is_map_type(data_type): ...
def is_nullable_type(data_type): ...
def is_numeric_type(data_type): ...
def is_primitive_type(data_type): ...
def is_string_type(data_type): ...
def is_struct_type(data_type): ...
def is_tag_ref(val): ...
def is_timestamp_type(data_type): ...
def is_union_type(data_type): ...
def is_user_defined_type(data_type): ...
def is_void_type(data_type): ...
def is_int32_type(data_type): ...
def is_int64_type(data_type): ...
def is_uint32_type(data_type): ...
def is_uint64_type(data_type): ...
def is_float32_type(data_type): ...
def is_float64_type(data_type): ...
