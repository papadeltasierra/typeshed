import typing
from _typeshed import Incomplete

from stone.frontend.ast import AstRouteDef

from .data_types import Alias, Annotation, AnnotationType, Struct, UserDefined

class Api:
    version: Incomplete
    namespaces: Incomplete
    route_schema: Incomplete
    def __init__(self, version: str) -> None: ...
    def ensure_namespace(self, name: str) -> ApiNamespace: ...
    def normalize(self) -> None: ...
    def add_route_schema(self, route_schema: Struct) -> None: ...

class _ImportReason:
    alias: bool
    data_type: bool
    annotation: bool
    annotation_type: bool
    def __init__(self) -> None: ...

class ApiNamespace:
    name: Incomplete
    doc: Incomplete
    routes: Incomplete
    route_by_name: Incomplete
    routes_by_name: Incomplete
    data_types: Incomplete
    data_type_by_name: Incomplete
    aliases: Incomplete
    alias_by_name: Incomplete
    annotations: Incomplete
    annotation_by_name: Incomplete
    annotation_types: Incomplete
    annotation_type_by_name: Incomplete
    def __init__(self, name: str) -> None: ...
    def add_doc(self, docstring: typing.Any) -> None: ...
    def add_route(self, route: ApiRoute) -> None: ...
    def add_data_type(self, data_type: UserDefined) -> None: ...
    def add_alias(self, alias: Alias) -> None: ...
    def add_annotation(self, annotation: Annotation) -> None: ...
    def add_annotation_type(self, annotation_type: AnnotationType) -> None: ...
    def add_imported_namespace(
        self,
        namespace: ApiNamespace,
        imported_alias: bool = False,
        imported_data_type: bool = False,
        imported_annotation: bool = False,
        imported_annotation_type: bool = False,
    ) -> None: ...
    def linearize_data_types(self) -> list[UserDefined]: ...
    def linearize_aliases(self) -> list[Alias]: ...
    def get_route_io_data_types(self) -> list[UserDefined]: ...
    def get_route_io_data_types_for_route(self, route: ApiRoute) -> set[UserDefined]: ...
    def get_imported_namespaces(
        self,
        must_have_imported_data_type: bool = False,
        consider_annotations: bool = False,
        consider_annotation_types: bool = False,
    ) -> list[ApiNamespace]: ...
    def get_namespaces_imported_by_route_io(self) -> list[ApiNamespace]: ...
    def normalize(self) -> None: ...

class ApiRoute:
    name: Incomplete
    version: Incomplete
    deprecated: Incomplete
    raw_doc: Incomplete
    doc: Incomplete
    arg_data_type: Incomplete
    result_data_type: Incomplete
    error_data_type: Incomplete
    attrs: Incomplete
    def __init__(self, name: str, version: int, ast_node: AstRouteDef | None) -> None: ...
    def set_attributes(self, deprecated, doc, arg_data_type, result_data_type, error_data_type, attrs) -> None: ...
    def name_with_version(self): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __eq__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class DeprecationInfo:
    by: Incomplete
    def __init__(self, by: ApiRoute | None = None) -> None: ...

class ApiRoutesByVersion:
    at_version: Incomplete
    def __init__(self) -> None: ...
