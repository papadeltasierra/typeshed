from _typeshed import Incomplete

class MultiToken:
    type: Incomplete
    tokens: Incomplete
    def __init__(self, tokens) -> None: ...

NullToken: Incomplete

class Lexer:
    states: Incomplete
    lex: Incomplete
    tokens_queue: Incomplete
    cur_indent: Incomplete
    last_token: Incomplete
    errors: Incomplete
    def __init__(self) -> None: ...
    def input(self, file_data, **kwargs) -> None: ...
    def token(self): ...
    def test(self, data) -> None: ...
    tokens: tuple[str, ...]
    t_DOT: str
    t_LBRACKET: str
    t_RBRACKET: str
    t_EQ: str
    t_COMMA: str
    t_Q: str
    t_LBRACE: str
    t_RBRACE: str
    t_COLON: str
    t_AT: str
    KEYWORDS: Incomplete
    RESERVED: Incomplete
    def t_LPAR(self, token): ...
    def t_RPAR(self, token): ...
    def t_ANY_BOOLEAN(self, token): ...
    def t_ANY_NULL(self, token): ...
    def t_ANY_ID(self, token): ...
    def t_ANY_PATH(self, token): ...
    def t_ANY_FLOAT(self, token): ...
    def t_ANY_INTEGER(self, token): ...
    def t_ANY_STRING(self, t): ...
    def t_INITIAL_comment(self, token): ...
    def t_WSIGNORE_comment(self, token) -> None: ...
    def t_INITIAL_NEWLINE(self, newline_token): ...
    def t_WSIGNORE_NEWLINE(self, newline_token) -> None: ...
    t_ignore: str
    def t_ANY_error(self, token) -> None: ...
