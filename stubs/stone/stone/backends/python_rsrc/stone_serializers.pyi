import typing
from _typeshed import Incomplete
from collections.abc import Callable, Mapping

from stone.backends.python_rsrc import stone_base as bb, stone_validators as bv

class CallerPermissionsInterface:
    @property
    def permissions(self) -> None: ...

class CallerPermissionsDefault(CallerPermissionsInterface):
    @property
    def permissions(self): ...

class StoneEncoderInterface:
    def encode(self, validator: bv.Validator, value: typing.Any) -> typing.Any: ...

class StoneSerializerBase(StoneEncoderInterface):
    caller_permissions: Incomplete
    def __init__(
        self,
        caller_permissions: CallerPermissionsInterface,
        alias_validators: Mapping[bv.Validator, Callable[[typing.Any], None]],
    ) -> None: ...
    @property
    def alias_validators(self): ...
    def encode(self, validator, value): ...
    def encode_sub(self, validator: bv.Validator, value: typing.Any) -> typing.Any: ...
    def encode_list(self, validator: bv.List, value: typing.Any) -> typing.Any: ...
    def encode_map(self, validator: bv.Map, value: typing.Any) -> typing.Any: ...
    def encode_nullable(self, validator: bv.Nullable, value: typing.Any) -> typing.Any: ...
    def encode_primitive(self, validator: bv.Primitive, value: typing.Any) -> typing.Any: ...
    def encode_struct(self, validator: bv.Struct, value: typing.Any) -> typing.Any: ...
    def encode_struct_tree(self, validator: bv.StructTree, value: typing.Any) -> typing.Any: ...
    def encode_union(self, validator: bv.Union, value: bb.Union) -> typing.Any: ...

class StoneToPythonPrimitiveSerializer(StoneSerializerBase):
    should_redact: Incomplete
    def __init__(
        self,
        caller_permissions: CallerPermissionsInterface,
        alias_validators: Mapping[bv.Validator, Callable[[typing.Any], None]],
        for_msgpack: bool,
        old_style: bool,
        should_redact: bool,
    ) -> None: ...
    @property
    def for_msgpack(self): ...
    @property
    def old_style(self): ...
    def encode_sub(self, validator, value): ...
    def encode_list(self, validator, value): ...
    def encode_map(self, validator, value): ...
    def encode_nullable(self, validator, value): ...
    def encode_primitive(self, validator, value): ...
    def encode_struct(self, validator, value): ...
    def encode_struct_tree(self, validator, value): ...
    def encode_union(self, validator, value): ...

class StoneToJsonSerializer(StoneToPythonPrimitiveSerializer):
    def encode(self, validator, value): ...

def json_encode(
    data_type,
    obj,
    caller_permissions: Incomplete | None = None,
    alias_validators: Incomplete | None = None,
    old_style: bool = False,
    should_redact: bool = False,
): ...
def json_compat_obj_encode(
    data_type,
    obj,
    caller_permissions: Incomplete | None = None,
    alias_validators: Incomplete | None = None,
    old_style: bool = False,
    for_msgpack: bool = False,
    should_redact: bool = False,
): ...

class PythonPrimitiveToStoneDecoder:
    caller_permissions: Incomplete
    alias_validators: Incomplete
    strict: Incomplete
    def __init__(self, caller_permissions, alias_validators, for_msgpack, old_style, strict) -> None: ...
    @property
    def for_msgpack(self): ...
    @property
    def old_style(self): ...
    def json_compat_obj_decode_helper(self, data_type, obj): ...
    def decode_struct(self, data_type, obj): ...
    def decode_struct_fields(self, ins, fields, obj) -> None: ...
    def decode_union(self, data_type, obj): ...
    def decode_union_dict(self, data_type, obj): ...
    def decode_union_old(self, data_type, obj): ...
    def decode_struct_tree(self, data_type, obj): ...
    def determine_struct_tree_subtype(self, data_type, obj): ...
    def decode_list(self, data_type, obj): ...
    def decode_map(self, data_type, obj): ...
    def decode_nullable(self, data_type, obj): ...
    def make_stone_friendly(self, data_type, val, validate): ...

def json_decode(
    data_type,
    serialized_obj,
    caller_permissions: Incomplete | None = None,
    alias_validators: Incomplete | None = None,
    strict: bool = True,
    old_style: bool = False,
): ...
def json_compat_obj_decode(
    data_type,
    obj,
    caller_permissions: Incomplete | None = None,
    alias_validators: Incomplete | None = None,
    strict: bool = True,
    old_style: bool = False,
    for_msgpack: bool = False,
): ...

msgpack_compat_obj_encode: Incomplete

def msgpack_encode(data_type, obj): ...

msgpack_compat_obj_decode: Incomplete

def msgpack_decode(data_type, serialized_obj, alias_validators: Incomplete | None = None, strict: bool = True): ...
