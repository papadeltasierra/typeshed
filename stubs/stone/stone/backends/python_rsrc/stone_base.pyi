import functools
import typing
from _typeshed import Incomplete

class AnnotationType: ...

class NotSet:
    def __copy__(self) -> NotSet: ...
    def __deepcopy__(self, memo: dict[str, typing.Any]) -> NotSet: ...

NOT_SET: Incomplete
NO_DEFAULT: Incomplete

class Attribute:
    name: Incomplete
    nullable: Incomplete
    user_defined: Incomplete
    validator: Incomplete
    default: Incomplete
    def __init__(self, name: str, nullable: bool = False, user_defined: bool = False) -> None: ...
    def __get__(self, instance: typing.Any, owner: typing.Any) -> typing.Any: ...
    def __set__(self, instance: typing.Any, value: typing.Any) -> None: ...
    def __delete__(self, instance: typing.Any) -> None: ...

class Struct:
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class Union:
    def __init__(self, tag, value: Incomplete | None = None) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class Route:
    name: Incomplete
    version: Incomplete
    deprecated: Incomplete
    arg_type: Incomplete
    result_type: Incomplete
    error_type: Incomplete
    attrs: Incomplete
    def __init__(self, name, version, deprecated, arg_type, result_type, error_type, attrs) -> None: ...

partially_apply = functools.partial

def make_struct_annotation_processor(annotation_type, processor): ...
def make_list_annotation_processor(processor): ...
def make_map_value_annotation_processor(processor): ...
def public_name(name): ...
