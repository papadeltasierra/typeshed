import abc
import typing
from _typeshed import Incomplete
from abc import abstractmethod

class ValidationError(Exception):
    message: Incomplete
    def __init__(self, message, parent: Incomplete | None = None) -> None: ...
    def add_parent(self, parent) -> None: ...

def type_name_with_module(t: type[typing.Any]) -> typing.Any: ...
def generic_type_name(v: typing.Any) -> typing.Any: ...

class Validator(Incomplete, metaclass=abc.ABCMeta):
    @abstractmethod
    def validate(self, val): ...
    def has_default(self): ...
    def get_default(self) -> None: ...

class Primitive(Validator, metaclass=abc.ABCMeta): ...

class Boolean(Primitive):
    def validate(self, val): ...

class Integer(Primitive):
    default_minimum: int | None
    default_maximum: int | None
    minimum: Incomplete
    maximum: Incomplete
    def __init__(self, min_value: Incomplete | None = None, max_value: Incomplete | None = None) -> None: ...
    def validate(self, val): ...

class Int32(Integer):
    default_minimum: Incomplete
    default_maximum: Incomplete

class UInt32(Integer):
    default_minimum: int
    default_maximum: Incomplete

class Int64(Integer):
    default_minimum: Incomplete
    default_maximum: Incomplete

class UInt64(Integer):
    default_minimum: int
    default_maximum: Incomplete

class Real(Primitive):
    default_minimum: float | None
    default_maximum: float | None
    minimum: Incomplete
    maximum: Incomplete
    def __init__(self, min_value: Incomplete | None = None, max_value: Incomplete | None = None) -> None: ...
    def validate(self, val): ...

class Float32(Real):
    default_minimum: Incomplete
    default_maximum: Incomplete

class Float64(Real): ...

class String(Primitive):
    min_length: Incomplete
    max_length: Incomplete
    pattern: Incomplete
    pattern_re: Incomplete
    def __init__(
        self, min_length: Incomplete | None = None, max_length: Incomplete | None = None, pattern: Incomplete | None = None
    ) -> None: ...
    def validate(self, val): ...

class Bytes(Primitive):
    min_length: Incomplete
    max_length: Incomplete
    def __init__(self, min_length: Incomplete | None = None, max_length: Incomplete | None = None) -> None: ...
    def validate(self, val): ...

class Timestamp(Primitive):
    format: Incomplete
    def __init__(self, fmt) -> None: ...
    def validate(self, val): ...

class Composite(Validator, metaclass=abc.ABCMeta): ...

class List(Composite):
    item_validator: Incomplete
    min_items: Incomplete
    max_items: Incomplete
    def __init__(self, item_validator, min_items: Incomplete | None = None, max_items: Incomplete | None = None) -> None: ...
    def validate(self, val): ...

class Map(Composite):
    key_validator: Incomplete
    value_validator: Incomplete
    def __init__(self, key_validator, value_validator) -> None: ...
    def validate(self, val): ...

class Struct(Composite):
    definition: Incomplete
    def __init__(self, definition) -> None: ...
    def validate(self, val): ...
    def validate_with_permissions(self, val, caller_permissions): ...
    def validate_fields_only(self, val) -> None: ...
    def validate_fields_only_with_permissions(self, val, caller_permissions) -> None: ...
    def validate_type_only(self, val) -> None: ...
    def has_default(self): ...
    def get_default(self): ...

class StructTree(Struct):
    def __init__(self, definition) -> None: ...

class Union(Composite):
    definition: Incomplete
    def __init__(self, definition) -> None: ...
    def validate(self, val): ...
    def validate_type_only(self, val) -> None: ...

class Void(Primitive):
    def validate(self, val) -> None: ...
    def has_default(self): ...
    def get_default(self) -> None: ...

class Nullable(Validator):
    validator: Incomplete
    def __init__(self, validator) -> None: ...
    def validate(self, val): ...
    def validate_type_only(self, val): ...
    def has_default(self): ...
    def get_default(self) -> None: ...

class Redactor(metaclass=abc.ABCMeta):
    regex: Incomplete
    def __init__(self, regex) -> None: ...
    @abstractmethod
    def apply(self, val): ...

class HashRedactor(Redactor):
    def apply(self, val): ...

class BlotRedactor(Redactor):
    def apply(self, val): ...
