from _typeshed import Incomplete
from collections.abc import Iterator

from stone.backend import Backend, CodeBackend
from stone.ir import ApiNamespace

def emit_pass_if_nothing_emitted(codegen: CodeBackend) -> Iterator[None]: ...
def fmt_class(name, check_reserved: bool = False): ...
def fmt_func(name, check_reserved: bool = False, version: int = 1): ...
def fmt_obj(o): ...
def fmt_type(data_type): ...
def fmt_var(name, check_reserved: bool = False): ...
def fmt_namespaced_var(ns_name, data_type_name, field_name): ...
def fmt_namespace(name): ...
def check_route_name_conflict(namespace) -> None: ...

TYPE_IGNORE_COMMENT: str

def generate_imports_for_referenced_namespaces(
    backend: Backend, namespace: ApiNamespace, package: str, insert_type_ignore: bool = False
) -> None: ...
def generate_module_header(backend) -> None: ...

validators_import: Incomplete
validators_import_with_type_ignore: Incomplete

def prefix_with_ns_if_necessary(name: str, name_ns: ApiNamespace, source_ns: ApiNamespace) -> str: ...
def class_name_for_data_type(data_type, ns: Incomplete | None = None): ...
def class_name_for_annotation_type(annotation_type, ns: Incomplete | None = None): ...
